<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sls.dao.PaperDao">
	<resultMap id="BaseResultMap" type="com.sls.vo.Paper">
		<id column="paper_id" jdbcType="INTEGER" property="paperId" />
		<result column="paper_user_id" jdbcType="VARCHAR" property="paperUserId" />
		<result column="course_id" jdbcType="INTEGER" property="courseId" />
		<result column="paper_time" jdbcType="VARCHAR" property="paperTime" />
		<result column="paper_name" jdbcType="VARCHAR" property="paperName" />
	</resultMap>
	<sql id="Base_Column_List">
		paper_id, paper_user_id, course_id, paper_time, paper_name
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List"></include>
		from table_paper
		where paper_id =
		#{paperId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		table_paper
		where paper_id = #{paperId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.sls.vo.Paper">
		insert into table_paper
		(paper_id, paper_user_id, course_id,
		paper_time, paper_name)
		values
		(#{paperId,jdbcType=INTEGER}, #{paperUserId,jdbcType=VARCHAR},
		#{courseId,jdbcType=INTEGER},
		#{paperTime,jdbcType=VARCHAR},
		#{paperName,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.sls.vo.Paper">
		insert into table_paper
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="paperId != null">
				paper_id,
			</if>
			<if test="paperUserId != null">
				paper_user_id,
			</if>
			<if test="courseId != null">
				course_id,
			</if>
			<if test="paperTime != null">
				paper_time,
			</if>
			<if test="paperName != null">
				paper_name,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="paperId != null">
				#{paperId,jdbcType=INTEGER},
			</if>
			<if test="paperUserId != null">
				#{paperUserId,jdbcType=VARCHAR},
			</if>
			<if test="courseId != null">
				#{courseId,jdbcType=INTEGER},
			</if>
			<if test="paperTime != null">
				#{paperTime,jdbcType=VARCHAR},
			</if>
			<if test="paperName != null">
				#{paperName,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.sls.vo.Paper">
		update table_paper
		<set>
			<if test="paperUserId != null">
				paper_user_id = #{paperUserId,jdbcType=VARCHAR},
			</if>
			<if test="courseId != null">
				course_id = #{courseId,jdbcType=INTEGER},
			</if>
			<if test="paperTime != null">
				paper_time = #{paperTime,jdbcType=VARCHAR},
			</if>
			<if test="paperName != null">
				paper_name = #{paperName,jdbcType=VARCHAR},
			</if>
		</set>
		where paper_id = #{paperId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.sls.vo.Paper">
		update table_paper
		set paper_user_id = #{paperUserId,jdbcType=VARCHAR},
		course_id =
		#{courseId,jdbcType=INTEGER},
		paper_time =
		#{paperTime,jdbcType=VARCHAR},
		paper_name =
		#{paperName,jdbcType=VARCHAR}
		where paper_id =
		#{paperId,jdbcType=INTEGER}
	</update>
<!-- ******************************************************* -->
	<!-- 批量删除 -->
	<delete id="deleteByBatch" parameterType="int[]">
		<!-- delete from emp where empno in(7789,7790) -->
		<!-- forEach : 用来循环 collection : 用来指定循环的数据的类型 可以填的值有：array,list,map item 
			: 循环中为每个循环的数据指定一个别名 index : 循环中循环的下标 open : 开始 close : 结束 separator : 数组中元素之间的分隔符 -->
		delete from table_paper where paper_id in
		<foreach collection="array" item="arr" index="no" open="("
			separator="," close=")">
			#{arr}
		</foreach>
	</delete>

	<resultMap id="paperResultMap" type="com.sls.vo.Paper">
		<id column="paper_id" jdbcType="INTEGER" property="paperId" />
		<result column="paper_user_id" jdbcType="VARCHAR" property="paperUserId" />
		<result column="course_id" jdbcType="INTEGER" property="courseId" />
		<result column="paper_time" jdbcType="VARCHAR" property="paperTime" />
		<result column="paper_name" jdbcType="VARCHAR" property="paperName" />
		<result column="course_name" jdbcType="VARCHAR" property="courseName" />
		<result column="user_name" jdbcType="VARCHAR" property="paperUserName" />
	</resultMap>
	
	<select id="selectByOtherCondition" parameterType="com.sls.vo.Paper"
		resultMap="paperResultMap">
		SELECT
			table_paper.paper_id,
			table_paper.paper_user_id,
			table_paper.course_id,
			table_paper.paper_time,
			table_paper.paper_name,
			table_course.course_name,
			table_user.user_name
		FROM
			table_paper ,
			table_course ,
			table_user		
		<where>
			<if test="paperUserId != null">
				and table_paper.paper_user_id = #{paperUserId,jdbcType=VARCHAR}
			</if>
			<if test="courseId != null">
				and table_paper.course_id = #{courseId,jdbcType=INTEGER}
			</if>
			<if test="paperTime != null">
				and table_paper.paper_time = #{paperTime,jdbcType=VARCHAR}
			</if>
			<if test="paperName != null">
				and table_paper.paper_name = #{paperName,jdbcType=VARCHAR}
			</if>
			AND
			table_paper.course_id = table_course.course_id 
			AND
			table_paper.paper_user_id = table_user.user_id
		</where>
	</select>

	<select id="selectAllPaper" resultMap="paperResultMap">
		select
			table_paper.paper_id,
			table_paper.paper_user_id,
			table_paper.course_id,
			table_paper.paper_time,
			table_paper.paper_name,
			table_course.course_name,
			table_user.user_name
		from 
			table_paper ,
			table_course ,
			table_user
		where
			table_paper.course_id = table_course.course_id 
			AND
			table_paper.paper_user_id = table_user.user_id
	</select>

	<!-- 返回某一张paper以及对应的Question -->
	<resultMap id="customResultMap" type="com.sls.vo.Paper">
		<id column="paper_id" jdbcType="INTEGER" property="paperId" />
		<result column="paper_user_id" jdbcType="VARCHAR" property="paperUserId" />
		<result column="cid" jdbcType="INTEGER" property="courseId" />
		<result column="paper_time" jdbcType="VARCHAR" property="paperTime" />
		<result column="paper_name" jdbcType="VARCHAR" property="paperName" />
		<collection property="question" ofType="com.sls.vo.Question">
			<id property="questionId" column="question_id" />
			<result property="questionUserId" column="question_user_id" />
			<result property="courseId" column="course_id" />
			<result property="questionInfo" column="question_info" />
			<result property="questionChoiceA" column="question_choice_a" />
			<result property="questionChoiceB" column="question_choice_b" />
			<result property="questionChoiceC" column="question_choice_c" />
			<result property="questionChoiceD" column="question_choice_d" />
			<result property="questionAnswer" column="question_answer" />
			<result property="questionType" column="question_type" />
			<result property="questionHard" column="question_hard" />
		</collection>
	</resultMap>

	<select id="selectAllPaperAndDetail" resultMap="customResultMap"
		parameterType="java.lang.Integer">
		SELECT
			t1.paper_id,
			t1.course_id cid,
			t1.paper_name,
			t1.paper_time,
			t1.paper_user_id,
			t3.*
		FROM
			table_paper t1,
			table_paper_detail t2,
			table_question t3
		WHERE
			t1.paper_id = t2.paper_id
			AND t1.paper_id = #{paperId,jdbcType=INTEGER}
			AND t2.question_id = t3.question_id
	</select>

	<!-- 将paper下的paperDetail List存入 table_paper_detail -->
	<insert id="insertPaperDetail" parameterType="java.util.List">
		INSERT INTO table_paper_detail
		(paper_id,question_id)
		VALUES
		<foreach collection="list" item="paperDetail" index="index"
			separator=",">
			(
			#{paperDetail.paperId},
			#{paperDetail.questionId}
			)
		</foreach>
	</insert>




</mapper>